{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { interval } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let DsiCountdownTimerComponent = /*#__PURE__*/(() => {\n  class DsiCountdownTimerComponent {\n    constructor() {\n      this.timerExpiredEvent = new EventEmitter();\n      this.milliSecondsInASecond = 1000;\n      this.hoursInADay = 24;\n      this.minutesInAnHour = 60;\n      this.SecondsInAMinute = 60;\n      this.message = \"\";\n    }\n\n    timeExpired() {\n      this.message = \"Time expired!\";\n      this.allocateTimeUnits(0);\n      this.subscription.unsubscribe();\n      this.timerExpiredEvent.emit();\n    }\n\n    getTimeDifference() {\n      this.timeDifference = this.dDay.getTime() - new Date().getTime();\n\n      if (this.timeDifference <= 0) {\n        this.timeExpired();\n      } else {\n        this.allocateTimeUnits(this.timeDifference);\n      }\n    }\n\n    allocateTimeUnits(timeDifference) {\n      this.secondsToDday = Math.floor(timeDifference / this.milliSecondsInASecond % this.SecondsInAMinute);\n      this.minutesToDday = Math.floor(timeDifference / (this.milliSecondsInASecond * this.minutesInAnHour) % this.SecondsInAMinute);\n      this.hoursToDday = Math.floor(timeDifference / (this.milliSecondsInASecond * this.minutesInAnHour * this.SecondsInAMinute) % this.hoursInADay);\n      this.daysToDday = Math.floor(timeDifference / (this.milliSecondsInASecond * this.minutesInAnHour * this.SecondsInAMinute * this.hoursInADay));\n      let seconds = this.secondsToDday.toString();\n      if (seconds.length === 1) seconds = `0${seconds}`;\n      this.timer = `${this.minutesToDday}:${seconds}`;\n    }\n\n    timeToMilliseconds(time) {\n      let timeComponents = time.split(\":\");\n      let minutes = parseInt(timeComponents[0]);\n      let seconds = parseInt(timeComponents[1]);\n      return (minutes * 60 + seconds) * 1000 + 2000;\n    }\n\n    ngOnInit() {\n      console.log(\"countdown:\", this.countdown);\n      let timeLimit = this.timeToMilliseconds(this.countdown);\n      this.dateNow = new Date();\n      this.dDay = new Date(this.dateNow.getTime() + timeLimit);\n      this.subscription = interval(1000).subscribe(x => {\n        this.getTimeDifference();\n      });\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n  }\n\n  DsiCountdownTimerComponent.ɵfac = function DsiCountdownTimerComponent_Factory(t) {\n    return new (t || DsiCountdownTimerComponent)();\n  };\n\n  DsiCountdownTimerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DsiCountdownTimerComponent,\n    selectors: [[\"dsi-countdown-timer\"]],\n    inputs: {\n      countdown: \"countdown\"\n    },\n    outputs: {\n      timerExpiredEvent: \"timerExpiredEvent\"\n    },\n    decls: 2,\n    vars: 1,\n    consts: [[1, \"timer\"]],\n    template: function DsiCountdownTimerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"span\", 0);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.timer);\n      }\n    },\n    encapsulation: 2\n  });\n  return DsiCountdownTimerComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}