{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"app/app-init.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@core/logger/logger.service\";\nimport * as i4 from \"@core/log/log.service\";\nimport * as i5 from \"@angular/router\";\nconst DoudIp = \"69.133.52.201\";\nconst DoudPhoneIp = \"174.233.133.93\";\nconst KenIP = \"75.185.248.152\";\nconst MaxIp = \"66.42.189.\"; //const GetIpUrl: string = \"http://api.ipify.org/?format=json\";\n\nconst GetIpUrl = \"http://doudsystems.com/getip\";\nexport let IpService = /*#__PURE__*/(() => {\n  class IpService {\n    constructor(init, http, log, logSvc, router) {\n      this.init = init;\n      this.http = http;\n      this.log = log;\n      this.logSvc = logSvc;\n      this.router = router;\n      this.getCurrentIp();\n    }\n\n    setIsValidIp(myIp) {\n      if (!this.init.config.checkIp) {\n        this.isValidDomain = true;\n        return;\n      }\n\n      let validIps = this.init.config.validIps;\n      this.isValidDomain = false;\n\n      for (let validIp of validIps) {\n        this.isValidDomain = this.isValidDomain || myIp.startsWith(validIp.ip);\n        if (this.isValidDomain) break; // once a valid IP is found; done\n      } // Allow all IPs (issue #24)\n      // this.isValidDomain = true;\n      // this.log.warn(\"#24: IP checking being bypassed.\");\n      // Allow all IPs (issue #24)\n\n    }\n\n    getIp() {\n      return this.http.get(GetIpUrl); // let fakeId = new Ip();\n      // fakeId.ip = `${MaxIp}00`;\n      // fakeId.name = \"Max IP\";\n      // return of(fakeId);\n    }\n\n    getCurrentIp() {\n      //    this.http.get(GetIpUrl).subscribe(\n      this.getIp().subscribe(res => {\n        this.logSvc.logDebug(`Previous IP is ${this.currentIp}; Current IP is ${res.ip}`);\n        this.log.debug(\"PrevIp:\", this.currentIp, \", CurrIp:\", res.ip);\n\n        if (this.currentIp !== res.ip) {\n          this.router.navigateByUrl(\"/login\");\n        }\n\n        this.currentIp = res.ip;\n        this.setIsValidIp(this.currentIp);\n        this.logSvc.logDebug(`New current IP is ${this.currentIp}`);\n        this.log.debug(`IP: ${this.currentIp}`);\n      }, err => {\n        this.log.fatal(\"*** FATAL: failed getting external IP! *** \", err);\n      });\n    }\n\n  }\n\n  IpService.ɵfac = function IpService_Factory(t) {\n    return new (t || IpService)(i0.ɵɵinject(i1.AppInitService), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.LoggerService), i0.ɵɵinject(i4.LogService), i0.ɵɵinject(i5.Router));\n  };\n\n  IpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: IpService,\n    factory: IpService.ɵfac,\n    providedIn: 'root'\n  });\n  return IpService;\n})();","map":null,"metadata":{},"sourceType":"module"}