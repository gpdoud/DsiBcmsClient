{"ast":null,"code":"import { Log, LogSeverity } from './log.class';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/app-init.service\";\nimport * as i2 from \"@angular/common/http\";\nexport let LogService = /*#__PURE__*/(() => {\n  class LogService {\n    constructor(init, http) {\n      this.init = init;\n      this.http = http;\n    }\n\n    get serverUrl() {\n      return this.init.config.baseurl;\n    }\n\n    list() {\n      return this.http.get(`${this.serverUrl}/logs`);\n    }\n\n    get(id) {\n      return this.http.get(`${this.serverUrl}/logs/${id}`);\n    }\n\n    create(log) {\n      return this.http.post(`${this.serverUrl}/logs`, log);\n    }\n\n    change(log) {\n      return this.http.post(`${this.serverUrl}/logs/update/${log.id}`, log);\n    }\n\n    remove(id) {\n      return this.http.post(`${this.serverUrl}/logs/delete/${id}`, null);\n    } // special functions\n\n\n    success(res) {}\n\n    failure(res) {\n      console.error(res);\n    }\n\n    logMessage(msg, sev) {\n      let log = new Log(msg, sev);\n      this.create(log).subscribe(res => this.success(res), err => this.failure(err));\n    }\n\n    logInfo(msg) {\n      this.logMessage(msg, LogSeverity.Info);\n    }\n\n    logWarn(msg) {\n      this.logMessage(msg, LogSeverity.Warn);\n    }\n\n    logError(msg) {\n      this.logMessage(msg, LogSeverity.Error);\n    }\n\n    logFatal(msg) {\n      this.logMessage(msg, LogSeverity.Fatal);\n    }\n\n    logTrace(msg) {\n      this.logMessage(msg, LogSeverity.Trace);\n    }\n\n    logDebug(msg) {\n      this.logMessage(msg, LogSeverity.Debug);\n    }\n\n  }\n\n  LogService.ɵfac = function LogService_Factory(t) {\n    return new (t || LogService)(i0.ɵɵinject(i1.AppInitService), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  LogService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LogService,\n    factory: LogService.ɵfac,\n    providedIn: 'root'\n  });\n  return LogService;\n})();","map":null,"metadata":{},"sourceType":"module"}